{"name":"Hangfire","tagline":"Background job processing for ASP.NET applications","body":"HangFire\r\n=========\r\n\r\nHangFire provides support for performing **background jobs in ASP.NET applications**. It allows you to define those jobs and process them asynchronously. HangFire helps you to move the long running tasks out of the request processing pipeline, for example:\r\n\r\n- Mass newsletter\r\n- Batch import from xml, csv, json\r\n- Creation of archives\r\n- Firing off web hooks\r\n- Deleting users\r\n- Building different graphs\r\n- Image processing\r\n- *etc.*\r\n\r\nHangFire stores the information about jobs in the [Redis storage](http://redis.io). So, all this information is retained after restarting the application.\r\n\r\nInstallation\r\n-------------\r\n\r\nHangFire stores its data in the Redis server instance, so you need to install it first. To learn different options and their pros and cons, see the [Installing Redis]() page in the documentation. But for now we'll install it using the simplest method through the NuGet Package Manager Console:\r\n\r\n<pre style=\"background-color: #202020;border: 4px solid silver;border-radius: 3px;color: #E2E2E2;display: block;padding: 10px;\">PM> Install-Package Redis-32</pre>\r\n\r\nPackage Manager will install the Redis binaries to the `<project-folder>\\packages\\redis-32.<*>\\tools` folder. Just open this folder and run the `redis-server.exe` program.\r\n\r\nNext, install the HangFire into your **ASP.NET application** using the Package Manager again:\r\n\r\n<pre style=\"background-color: #202020;border: 4px solid silver;border-radius: 3px;color: #E2E2E2;display: block;padding: 10px;\">PM> Install-Package HangFire</pre>\r\n\r\nConfiguration\r\n--------------\r\n\r\nDuring the installation of the HangFire package, the `App_Start\\HangFireConfig.cs` file appears in your project. This file contains the instructions to run the HangFire Server during the start-up of your ASP.NET application with the default options. Just build your project and open the following URL in a browser:\r\n\r\n<div style=\"border-radius: 0;border:solid 3px #ccc;background-color:#fcfcfc;box-shadow: 1px 1px 1px #ddd inset, 1px 1px 1px #eee;padding:3px 7px;\">\r\n<span style=\"color: #666;\">http://&lt;your-site&gt;</span>/hangfire.axd\r\n</div>\r\n\r\nIf you see a page like this, then the configuration step is finished. To learn more about configuration or if you do not see that page, the [Configuration page]() in the documentation, especially its Troubleshooting section.\r\n\r\n![HangFire Dashboard](https://github.com/odinserj/hangfire/raw/master/Examples/dashboard_min.png)\r\n\r\nUsage\r\n------\r\n\r\nHangFire consist of the four parts. The **Client** creates background jobs and places them into the **Storage**. The **Server** fetches jobs from the Storage and processes them. The **Monitor** provides the ability to see what's going on with your background jobs.\r\n\r\nTo make things work, you need to do the following stuff.\r\n\r\n### 1. Define a job\r\n\r\nJob is a piece of work that will be processed asynchonously. To define it, just create a new class, derive it from the `BackgroundJob` class, override the `Perform` method and provide some properties which will serve as arguments of your job.\r\n\r\n```csharp\r\npublic void LongRunningJob : BackgroundJob\r\n{\r\n    public string Name { get; set; }\r\n\r\n    public override void Perform()\r\n    {\r\n        Console.WriteLine(\"Hello, {0}!\", Name);\r\n    }\r\n}\r\n```\r\n\r\nTo learn more about job classes, see the [Defining Jobs page]() in the documentation.\r\n\r\n### 2. Create a job\r\n\r\nYou have different options about how to run the defined job. The first and default method is based on job queues. Each queue contains jobs that will be performed in the FIFO order. To enqueue a job, call the following method.\r\n\r\n```csharp\r\nPerform.Async<LongRunningJob>(new { Name = \"man\" });\r\n```\r\n\r\nYou also can tell HangFire to delay the excecution of the job. After the given delay it will be enqueued to its queue and processed by the server.\r\n\r\n```csharp\r\nPerform.In<LongRunningJob>(TimeSpan.FromDays(1), new { Name = \"man\" });\r\n```\r\n\r\nTo learn more about different options of the job creation process, see the [corresponding page]() in the documentation.\r\n\r\n### 3. Start the processing\r\n\r\nIf you installed HangFire using the NuGet Package Manager, this step is already completed for you, see the `App_Start\\HangFireConfig.cs` class. It contains instructions to run the HangFire Server with default options:\r\n\r\n```csharp\r\nvar server = new AspNetBackgroundJobServer();\r\nserver.Start();\r\n```\r\n\r\nYou can find more information about the [HangFire Server]() in the documentation.\r\n\r\nLicense\r\n--------\r\n\r\nPlease see the LICENSE.txt file for licensing details.\r\n\r\nAuthor\r\n-------\r\n\r\nSergey Odinokov, odinserj (at) gmail (dot) com","google":"UA-45386460-2","note":"Don't delete this file! It's used internally to help with page regeneration."}